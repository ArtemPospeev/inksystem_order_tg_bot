from pathlib import Path
from loguru import logger

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import NoSuchElementException

# emoji
emoji_order_number = '‚öí'
emoji_start_date = 'üìÜ'
emoji_order_status = 'üìç'
emoji_device_name = 'üîß'
emoji_breakdown_desc = 'üî®'
emoji_appearance = 'üé®'

emoji_list = [
    emoji_order_number,
    emoji_start_date,
    emoji_order_status,
    emoji_device_name,
    emoji_breakdown_desc,
    emoji_appearance,
]

# url
URL = 'http://remontprinterov.com/servis'

# init logger
logger.add("debug.log", format='{time} {level} {message', level='DEBUG')


def add_emoji(emoji: str, other_data: str) -> str:
    '''
    –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∂–∏ –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
    :param emoji:str
    :param other_data:str
    :return str
    '''
    return f'{emoji} {other_data}'


def get_data_from_xpath(driver: webdriver, xpath: str) -> str:
    '''
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ xpath'—É \n
    :param driver:webdriver \n
    :param xpath:str \n
    :return str
    '''
    return f'{driver.find_element("xpath", f"{xpath}").text}'


def make_beautiful_answer(*args) -> str:
    '''
    –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç \n
    :arg str, str, str \n
    :return str
    '''
    res = ''
    for emoji, el in zip(emoji_list, args):
        res += f'{emoji} {el} \n'
    return res


def init_browser(headless: bool = True) -> webdriver:
    '''
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä —Å –æ–ø—Ü–∏—è–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç driver \n
    :param headless= Bool \n
    :return selenium.driver
    '''
    logger.info(' –û—Ç–ø—Ä–∞–≤–ª—è–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç ')

    # web driver options
    options = webdriver.ChromeOptions()

    # headless mode
    if headless:
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')

    # driver
    path_to_driver = str(Path(__file__).parent / 'chromedriver/chromedriver')
    driver = webdriver.Chrome(
        service=Service(path_to_driver),
        options=options,
    )
    return driver


def parse_data_from_site(order_number: str | int, url: str = URL) -> str:
    driver = init_browser()

    try:  # –û—Ç–ª–∏–≤–ª–∏–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        driver.get(url=url)

        order_input = driver.find_element('name', 'number_zakaz')  # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ –∏–º–µ–Ω–∏
        order_input.clear()  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        order_input.send_keys(str(order_number))  # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç—É–¥–∞ –ø—Ä–∏–Ω—è—Ç—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑ - –Ω–∞—Ä—è–¥–∞
        order_input.send_keys(Keys.ENTER)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å (—á–µ—Ä–µ–∑ –Ω–∞–∂–∞—Ç–∏–µ Enter)

        # –ù–∏–∂–µ –ø–∞—Ä—Å–∏–º –ø–æ XPath –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã
        order_number = get_data_from_xpath(driver, "/html/body/div[1]/section/div/div/div/table/tbody/tr[1]")

        start_date = get_data_from_xpath(driver, "/html/body/div[1]/section/div/div/div/table/tbody/tr[2]")

        order_status = get_data_from_xpath(driver, "/html/body/div[1]/section/div/div/div/table/tbody/tr[3]")

        device_name = get_data_from_xpath(driver, "/html/body/div[1]/section/div/div/div/table/tbody/tr[5]")

        breakdown_desc = get_data_from_xpath(driver, '/html/body/div[1]/section/div/div/div/table/tbody/tr[7]')

        appearance = get_data_from_xpath(driver, "/html/body/div[1]/section/div/div/div/table/tbody/tr[8]")

        # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç
        data = make_beautiful_answer(
            order_number,
            start_date,
            order_status,
            device_name,
            breakdown_desc,
            appearance,
        )

    except NoSuchElementException:  # –ù–µ –Ω–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —É–ø–∞–ª —Å–∞–π—Ç)
        data = '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
        logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç/ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã')

    except Exception as err:  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ª–æ–≤–∏–º –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏.
        logger.error(f'{err}\n')
        data = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –∏ —Å–æ–æ–±—â–∏—Ç–µ –æ –Ω–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏'

    finally:
        driver.close()
        driver.quit()

    logger.info('–î–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã')
    return data


if __name__ == '__main__':
    print(parse_data_from_site(2201020))
