import os
from pathlib import Path
from dotenv import load_dotenv

from telebot import types, telebot
from loguru import logger

from selenium_main import parse_data_from_site

# load environment variables
BASE_DIR = Path(__file__).resolve().parent
FILE_DIR = BASE_DIR / 'files_ru/'
CODING = 'UTF-8'
dot_env = BASE_DIR / '.env'
load_dotenv(dotenv_path=dot_env)

# init logger
logger.add("debug.log", format='{time} {level} {message}', level='DEBUG', rotation='10 MB', compression='zip')

greeting = f'üöÄ *–ü—Ä–∏–≤–µ—Ç. –Ø InkSystem Bot. –Ø –º–æ–≥—É:*\n\n' \
           f'1‚É£ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç–∞ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞\n\n' \
           f'2‚É£ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –æ—à–∏–±–æ–∫ –Ω–∞ –ø–µ—á–∞—Ç–∞—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö Epson\n\n' \
           f'3‚É£ –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –ø—Ä–æ–º—ã—Ç—å –ø–µ—á–∞—Ç–∞—é—â—É—é –≥–æ–ª–æ–≤–∫—É\n\n' \
           f'4‚É£ –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫—É –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ –°–ù–ü–ß\n\n' \
           f'5‚É£ –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∫–ª—é—á InkWic\n\n' \
           f'6‚É£ –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å–∞ –∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤\n\n' \
           f'7‚É£ –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—á–∞—Ç–∞—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä\n\n'


@logger.catch
def give_data_from_file(file: str) -> str:
    '''
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    :param file: str - –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
    :return str - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    '''
    with open(FILE_DIR / (file + '.txt'), 'r', encoding=CODING) as f:
        text = f.read()
    return text


@logger.catch
def telegram_bot(token):
    bot = telebot.TeleBot(token)

    @bot.message_handler(commands=['start', 'info'])  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
    def start_message(message):
        logger.info(f'–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = [types.KeyboardButton('–°—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç–∞'),  # –ö–Ω–æ–ø–∫–∏
                   types.KeyboardButton('–ö–æ–¥—ã –æ—à–∏–±–æ–∫ '),
                   types.KeyboardButton('–ü—Ä–æ–º—ã–≤–∫–∞ –≥–æ–ª–æ–≤–∫–∏'),
                   types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –°–ù–ü–ß'),
                   types.KeyboardButton('–ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∫–ª—é—á InkWic'),
                   types.KeyboardButton('–ê–¥—Ä–µ—Å–∞ –∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –°–¶'),
                   types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –°–¶'),
                   ]
        markup.add(*buttons)
        bot.send_message(message.chat.id,  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ /start
                         greeting,
                         reply_markup=markup,
                         parse_mode='Markdown')

    @bot.message_handler(content_types=['text'])  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def message_reply(message):
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –∫ –Ω–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç):
        if message.text == "–°—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç–∞":
            response = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏'

        elif message.text == '–ö–æ–¥—ã –æ—à–∏–±–æ–∫':
            response = give_data_from_file('errors_code')

        elif message.text == '–ü—Ä–æ–º—ã–≤–∫–∞ –≥–æ–ª–æ–≤–∫–∏':
            response = give_data_from_file('flushing_print_head')

        elif message.text == '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –°–ù–ü–ß':
            response = give_data_from_file('prevention_CISS')

        elif message.text == '–ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∫–ª—é—á InkWic':
            response = give_data_from_file('key_inkwic')

        elif message.text == '–ê–¥—Ä–µ—Å–∞ –∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –°–¶':
            response = give_data_from_file('adresses_service_centers')

        elif message.text == '–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –°–¶':
            response = give_data_from_file('send_service_center')

        elif message.text.isnumeric() and len(message.text) == 7:
            response = parse_data_from_site(message.text)
            # –í —ç—Ç–æ–º –±–ª–æ–∫–µ if –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–¥–æ –ª–∏ –Ω–∞–º –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É (–¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä)

        else:
            response = '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã :('

        logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        bot.send_message(message.chat.id, response)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    bot.infinity_polling(none_stop=True, interval=0)  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –±–æ—Ç–∞


def main():
    token = os.getenv('API_BOT')
    telegram_bot(token)


if __name__ == '__main__':
    main()
